<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="components.*"
		add="viewAddHandler(event)" destructionPolicy="never" title="EditRecord">
	<fx:Declarations>
		<components:Dialog id="invalidCharAlert" />
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
	</fx:Declarations>
	<fx:Script>
	<![CDATA[
		import models.RecordModel;
		import models.RecordInfoModel;
		
		import spark.transitions.SlideViewTransition;
		import spark.transitions.SlideViewTransitionMode;
		import spark.transitions.ViewTransitionDirection;
		
		/* ファイルを保存するかどうか */
		private var saveFlag:Boolean = false;

		private function cancelButtonClickHandler(event:MouseEvent):void
		{
			saveFlag = false;
			popView();
		}
			
		private function doneButtonClickHandler(event:MouseEvent):void
		{
			// TODO:アプリ再開がこの画面から再開するときは保存ができない。まあAddでなくEditだから大した被害ないけど。
			if (data != null) // アプリ再開がこの画面のときはdataはnullになっている
			{// TODO:destructionPolicy=neverのときはそもそもAddイベントが起きないようだが要調査。.
				RecordModel.getInstance().setTitle((data as RecordInfoModel), info.titleTextInput.text);
				RecordModel.getInstance().setComment((data as RecordInfoModel), info.commentTextArea.text);
			}
			
			popView();
		}
			
		private function popView():void
		{
			var v:SlideViewTransition = new SlideViewTransition();
			v.mode = SlideViewTransitionMode.UNCOVER;
			v.direction = ViewTransitionDirection.DOWN;
			this.navigator.popView(v);
		}
		
		public override function createReturnObject():Object{
			return data;
		}
		
		private function viewAddHandler(event:Event):void
		{
			if (data != null) //destrunctionPolicy=autoのときは、アプリ再開がこの画面のときはdataはnullになっている。
			{ // TODO:destructionPolicy=neverのときはそもそもAddイベントが起きないようだが要調査。.
				var record:RecordInfoModel = data as RecordInfoModel;
				info.titleTextInput.text = record.title;
				info.commentTextArea.text = record.comment;
				info.recordTextsChangeCallback = recordTextsChangeHandler;
				doneButton.enabled = RecordModel.getInstance().isValidText(info.titleTextInput.text)
									&& RecordModel.getInstance().isValidText(info.commentTextArea.text);
			}
		}
		
		private function recordTextsChangeHandler():void
		{
			var valid:Boolean = RecordModel.getInstance().isValidText(info.titleTextInput.text) && RecordModel.getInstance().isValidText(info.commentTextArea.text);
			doneButton.enabled = valid;
			if (!valid)
			{
				invalidCharAlert.show(this, "Title or Comment includes invalid character: >, <, &, \' or \".", "Invalid Char Alert", Dialog.BUTTON_OK);
			}
		}
	]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button label="Cancel" click="cancelButtonClickHandler(event)"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button id="doneButton" label="Done" click="doneButtonClickHandler(event)" enabled="false"/>
	</s:actionContent>
	<components:RecordInformation id="info" currentState="edit" gap="20" paddingBottom="10"
								  paddingLeft="10" paddingRight="10" paddingTop="10"/>
</s:View>
